module.exports = {

  identity: 'get-access-token',
  friendlyName: 'Get access token',
  description: 'Generate a new access token to access a user\'s Facebook account.',
  extendedDescription: 'Note that you must first have a valid `code` from the user proving that they\re OK with this.\nYou can get a code by redirecting the user to the url generated by calling the `getLoginUrl(...)` machine.',
  cacheable: true,

  inputs: {
    appId: {
      example: '215798311808508',
      description: 'Your Facebook app id',
      required: true
    },
    appSecret: {
      example: 'dsg4901g0123456',
      description: 'Your Facebook app secret',
      required: true
    },
    code: {
      example: 'AQDvCav5zRSafS795TckAerUV53xzgqRyrcfYX2i_PJFObCvACVRP-V7sfemiMPBh3TWypvagfZ6aoqfwKCNcBxg8XR_skdYUe5tsY9UzX9Z_8q4mRrqaLhwSh5OHj9ORmE4ocyd-neZtdceTZjlmEVeO38UH9QOe_md7h5hy2gMhOS6TL9IBk5Guxg3O6I0WmjpFNPoj6JzWIvG9cgj7RQqxMA2q_8EJxGPTqEbmTqOBqqCIOlvPEPCeIiy21VD9__tuzB0JvgqbVh-U_WW8mjwGBqsfxlNvjYwIxk4zBNAxuRJijkkn0TwyogFpZqIlkY',
      description: 'The OAuth `code` generated by Facebook and sent to the `callbackUrl` if the user chooses to grant your app the requested permissions.',
      required: true
    },
    callbackUrl: {
      example: 'http://localhost:1337/user/facebook/login',
      description: 'The URL which will be hit after the user successfully logs in.  Usually contains some kind of identifying information about the user.',
      required: true
    }
  },

  defaultExit: 'success',
  catchallExit: 'error',

  exits: {
    error: {
      example: {
        status: 400,
        headers: {
          'www-authenticate': 'OAuth "Facebook Platform" "invalid_code" "This authorization code has expired."',
          'facebook-api-version': 'v1.0',
          'content-type': 'application/json',
          pragma: 'no-cache',
          'access-control-allow-origin': '*',
          'x-fb-rev': '1468811',
          'cache-control': 'no-store',
          expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
          'x-fb-debug': 'h2NQGoNXkWIAMJHeTFDSykKRKjYF+8j8stIRSH6ShpPVPVcc+OzAYghy/OMxTqp91WfQGaqDFScMAHUxi9A0+w==',
          date: 'Sun, 26 Oct 2014 00:28:20 GMT',
          connection: 'keep-alive',
          'content-length': '95'
        },
        body: {
          error: {
            message: 'This authorization code has expired.',
            type: 'OAuthException',
            code: 100
          }
        }
      }
    },
    success: {
      description: 'The access token which allows you to do things and get information on behalf of a particular Facebook user.',
      example: {
        token: 'CA2Emk9XsJUIBAHB9sTF5rOdNmAXTDjiHxZaZC1GYtFZCcdYGVnLYZB7jZCvensIpGc22yEzN6CL6wtQ9LPVXTNkuP6eQoUQ0toEVPrmTTqDpj0POijBpsuZBnx7jrZCHaTw8leiZBn0R8u6gZAYZAuD77cA3tnDMYvHhrl42CnljROeC9maWoa5zbsT2TZBXdL9wEuGQDSxKqRPyajRw3P3HEK',
        expires: 39523862396
      }
    }
  },

  fn: function (inputs, exits) {

    var doJSONRequest = require('../lib/do-request');

    // GET projects/ and send the api token as a header
    doJSONRequest({
      method: 'get',
      url: '/oauth/access_token',
      data: {
        'redirect_uri': inputs.callbackUrl,
        'client_id': inputs.appId,
        'client_secret': inputs.appSecret,
        'code': inputs.code,
      },
      headers: {}
    }, function (err, responseBody) {
      if (err) {
        return exits.error(err);
      }

      // Parse Facebook Access Token from request Body
      var token;
      try {
        return exits.success({
          token: responseBody.match(/access_token=([a-z0-9]+)[^a-z0-9]{0,}/i)[1],
          expires: responseBody.match(/expires=([0-9]+)[^0-9]{0,}/i)[1]
        });
      } catch (parseError){
        return exits.error(parseError);
      }
    });
  }
};
